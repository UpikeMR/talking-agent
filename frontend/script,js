document.addEventListener('DOMContentLoaded', () => {
    const recordBtn = document.getElementById('recordBtn');
    const playBtn = document.getElementById('playBtn');
    const status = document.getElementById('status');

    if (!recordBtn || !playBtn || !status) {
        console.error('Elements not found: recordBtn, playBtn, or status');
        return;
    }

    let audioBlob = null; // Store the response audio for playback

    recordBtn.addEventListener('click', async () => {
        console.log('Speak Now button clicked');
        try {
            // Reset UI
            status.textContent = 'Requesting microphone access...';
            playBtn.classList.add('hidden');
            audioBlob = null;

            console.log('Requesting microphone access...');
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            console.log('Microphone access granted');

            const mediaRecorder = new MediaRecorder(stream);
            const chunks = [];

            // Update UI to show recording state
            mediaRecorder.start();
            console.log('Recording started');
            recordBtn.textContent = 'Recording...';
            recordBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
            recordBtn.classList.add('bg-red-700', 'animate-pulse');
            status.textContent = 'Listening...';

            mediaRecorder.ondataavailable = (e) => {
                chunks.push(e.data);
                console.log('Audio chunk recorded:', e.data);
            };

            mediaRecorder.onstop = async () => {
                console.log('Recording stopped');
                recordBtn.textContent = 'Speak Now';
                recordBtn.classList.remove('bg-red-700', 'animate-pulse');
                recordBtn.classList.add('bg-red-500', 'hover:bg-red-600');
                status.textContent = 'Processing...';

                const blob = new Blob(chunks, { type: 'audio/wav' });
                console.log('Audio blob created:', blob);

                const formData = new FormData();
                formData.append('audio', blob, 'recording.wav');
                console.log('Sending audio to back-end...');

                const response = await fetch('https://talking-agent-backend.onrender.com/conversation', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`Server responded with ${response.status}: ${await response.text()}`);
                }

                console.log('Response received from back-end');
                audioBlob = await response.blob();
                const audioUrl = URL.createObjectURL(audioBlob);

                // Show the play button and update status
                playBtn.classList.remove('hidden');
                status.textContent = 'Response ready! Click "Play Response" to listen.';
            };

            // Stop recording after 5 seconds
            setTimeout(() => {
                mediaRecorder.stop();
            }, 5000);
        } catch (error) {
            console.error('Error:', error);
            recordBtn.textContent = 'Speak Now';
            recordBtn.classList.remove('bg-red-700', 'animate-pulse');
            recordBtn.classList.add('bg-red-500', 'hover:bg-red-600');
            status.textContent = 'Error: ' + error.message;
            alert('Error: ' + error.message);
        }
    });

    playBtn.addEventListener('click', () => {
        if (audioBlob) {
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            audio.play();
            status.textContent = 'Playing response...';
            console.log('Playing response audio');
        } else {
            status.textContent = 'No response audio available.';
        }
    });
});